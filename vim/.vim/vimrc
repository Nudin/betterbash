" Use Vim settings, rather than Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
set nocompatible
" Disable ex mode
map Q <Nop>

filetype plugin indent on

" UI Config
set number
set title
set confirm
set showcmd
set ruler
set cursorline
set wildmenu " Autocompletion
set wildmode=longest:full
set wildignore+=*.a,*.o,*.hi
set wildignore+=*.pdf,*.gz,*.aux,*.out,*.nav,*.snm,*.vrb
set updatetime=250  " Decrease updatetime from 4s to 250ms
set fillchars+=vert:\│,fold:— " nice line for vsplit and folds

" Syntax-Highlight and colors
syntax on
set showmatch	" highlight matching [{()}]
set t_Co=256
"set termguicolors
set background=dark

" grey background after char 80
let &colorcolumn=join(range(81,999),",")
highlight ColorColumn ctermbg=234

" Enable Mouse
if has('mouse')
  set mouse=a
endif

" Indent
set autoindent
set smartindent
set tabstop=4
set softtabstop=4
set shiftwidth=4
set smarttab

" Search
set incsearch
set ignorecase
set smartcase
set hlsearch
if has('nvim')  " neovimonly
  set inccommand=nosplit " live search and replace; neovim only
endif

" History
set history=50		" keep 50 lines of command line history
set laststatus=2

" Copy & Paste
set clipboard=unnamed
set pastetoggle=<F11>

" Split right & down
set splitright
set splitbelow

" backup files
set undodir=~/.vim/.undo//,.,/tmp
set backupdir=~/.vim/.backup//,.,/tmp
set directory=~/.vim/.swp//,.,/tmp
set backup		" keep a backup file (restore to previous version)
set undofile	" keep an undo file (undo changes after closing)

" allow backspacing over everything in insert mode
set backspace=indent,eol,start
set whichwrap=b,s,<,>,[,]
" make underscore a word boundary
"set iskeyword-=_

" Fold
set foldenable
set foldmethod=indent
set foldlevelstart=10
set foldnestmax=10

" at least 10 lines of context above/below cursor
set scrolloff=5

" Scroll text without cursor
noremap <C-j> j<C-e>
noremap <C-k> k<C-y>

" Add empty line without insertmode
nnoremap <M-o> O<Esc>j
nnoremap ø o<Esc>k

" delete without yank
nnoremap s "_d

" Save
command! W w
command! Q q
command! Wq wq
command! WQ wq

" Wrap current paragraph
imap <C-q> <Esc>gqipA
nmap <C-q> gqip$

" set marker a from insert mode
inoremap ;1 <c-o>ma

" Allow saving of files as sudo when I forgot to start vim using sudo.
cmap w!! w !sudo tee > /dev/null %

let mapleader=","
" save session
nnoremap <leader>s :mksession<CR>

" spellchecking
if has('nvim')
    silent! set spell spelllang=en,de,dewp
else
    silent! set spell spelllang=en,de
endif
set spellfile=~/.config/nvim/spell/mine.utf-8.add
map <F6> :setlocal spell! spelllang=en_us<CR>
map <F7> :setlocal spell! spelllang=de<CR>
map <BS> hx
fun! IgnoreABREVSpell()
  syn match Shout /\<[A-Z]\{1,5}\>\C/ contains=@NoSpell
endfun
autocmd BufRead,BufNewFile * :call IgnoreABREVSpell()

iabbrev retunr return

" SETUP TERMINAL
if has('nvim')
  highlight TermCursor ctermfg=red guifg=red
  tnoremap <ESC><ESC> <C-\><C-n>

  command! Vterm 80vsplit | terminal
  command! Term 10split | terminal

  " Window navigation function
  " Make ctrl-h/j/k/l move between windows and auto-insert in terminals
  func! s:mapMoveToWindowInDirection(direction)
      func! s:maybeInsertMode(direction)
          stopinsert
          execute 'wincmd' a:direction

          if &buftype is# 'terminal'
              startinsert!
          endif
      endfunc

      execute "tnoremap" "<silent>" "<M-" . a:direction . ">"
                  \ "<C-\\><C-n>"
                  \ ":call <SID>maybeInsertMode(\"" . a:direction . "\")<CR>"
      execute "nnoremap" "<silent>" "<M-" . a:direction . ">"
                  \ ":call <SID>maybeInsertMode(\"" . a:direction . "\")<CR>"
  endfunc
  for dir in ["h", "j", "l", "k"]
      call s:mapMoveToWindowInDirection(dir)
  endfor
endif

" Show tipps
let g:MyVimTips="off"
function! ToggleVimTips()
  if g:MyVimTips == "on"
    let g:MyVimTips="off"
    pclose
  else
    let g:MyVimTips="on"
    pedit ~/.vimwiki/Vimnotes.wiki
  endif
endfunction

nnoremap <F1> :call ToggleVimTips()<CR>

" When writing vimrc automatically reload it
autocmd! bufwritepost vimrc source %

"===== PLUGINS =====
call plug#begin('~/.vim/plugged')
Plug 'itchyny/lightline.vim'        " Statusline
"Plug 'vim-airline/vim-airline'     " More powerfull alternative to airline
Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' }
Plug 'godlygeek/tabular'
Plug 'tpope/vim-fugitive'           " Git wrapper
Plug 'tpope/vim-rhubarb'            " fugitive extension for github
Plug 'airblade/vim-gitgutter'       " Show changes to last commit in gutter
Plug 'simnalamburt/vim-mundo'       " Global tree-structure undo
Plug 'tpope/vim-sleuth'             " Set shiftwidth/expandtabs automatically
Plug 'guns/xterm-color-table.vim', { 'on':  'XtermColorTable' }
Plug 'vim-scripts/mru.vim'
Plug 'mattn/calendar-vim'
Plug 'Nudin/vimwiki', { 'branch': 'dev' }    " Wiki for Vim
"Plug 'vimwiki/vimwiki', { 'branch': 'dev' }    " Wiki for Vim
"Plug 'tbabej/taskwiki'
Plug 'powerman/vim-plugin-AnsiEsc'
Plug 'farseer90718/vim-taskwarrior'
Plug 'majutsushi/tagbar'            " list functions, methods, structs... 
Plug 'aquach/vim-mediawiki-editor'  " Edit mediawikis
Plug 'scrooloose/nerdcommenter'     " Easy comment/uncoment lines
Plug 'dpelle/vim-LanguageTool'      " Check grammar with languagetool
Plug 'sbdchd/neoformat'             " Pretty formatting code
Plug 'jamessan/vim-gnupg'
Plug 'EinfachToll/DidYouMean'       " asks for the right file to open
Plug 'tpope/vim-obsession'          " autosave sessions
Plug 'mhinz/vim-startify'           " start page
Plug 'tpope/vim-repeat'
Plug 'vim-utils/vim-man'
Plug 'Nudin/ToggleClip'
Plug 'mhinz/vim-grepper', { 'on': ['Grepper', '<plug>(GrepperOperator)'] }
Plug 'jiangmiao/auto-pairs' " to test #356
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'editorconfig/editorconfig-vim'
Plug 'vim-scripts/transpose-words'
Plug 'junegunn/goyo.vim'
Plug 'inkarkat/vim-SpellCheck'
Plug 'inkarkat/vim-ingo-library'
Plug 'reedes/vim-wordy'
Plug 'thaerkh/vim-indentguides'
Plug 'sheerun/vim-polyglot'
Plug 'chrisbra/NrrwRgn'
Plug 'arp242/jumpy.vim'
Plug 'bkad/CamelCaseMotion'
"""" Language specific plugins
Plug 'vim-latex/vim-latex'
Plug 'rust-lang/rust.vim'
Plug 'Nudin/vim-sparql'
Plug 'neovimhaskell/haskell-vim'
Plug 'pbrisbin/vim-syntax-shakespeare'
Plug 'vim-scripts/ditaa'
Plug 'ternjs/tern_for_vim'
Plug 'dbeniamine/cheat.sh-vim'
"""" Pluging not compatible with vim 7""""
if has('nvim') || v:version > 800
  Plug 'w0rp/ale'                     " Asynchronous Lint Engine
  Plug 'thaerkh/vim-workspace'
endif
if has('nvim')  " neovimonly
  Plug 'bfredl/nvim-miniyank'
  Plug 'Floobits/floobits-neovim'
  " Completion with deoplete
  Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
  Plug 'Shougo/neco-syntax'                                        " general (by vims syntax files)
  Plug 'deoplete-plugins/deoplete-jedi'                            " python
  Plug 'carlitux/deoplete-ternjs', { 'do': 'npm install -g tern' } " js
  Plug 'Shougo/neco-vim'                                           " vimscript
  Plug 'eagletmt/neco-ghc'                                         " Haskell
  Plug 'wellle/tmux-complete.vim'                                  " form other tmux panes
  " Plug 'ujihisa/neco-look'                                        Dictionary

  Plug 'rliang/termedit.nvim'       " set a envvar in neovims term to not open nvim in nvim
  Plug 'kassio/neoterm'
endif
""" Colorschemes
Plug 'iCyMind/NeoSolarized'
Plug 'joshdick/onedark.vim'
Plug 'mhartington/oceanic-next'
Plug 'KeitaNakamura/neodark.vim'
Plug 'sjl/badwolf'
call plug#end()

colorscheme badwolf

" Enable deoplete
let g:deoplete#enable_at_startup = 1
let g:deoplete#max_list = 100
inoremap <expr><tab> pumvisible() ? "\<c-n>" : "\<tab>"
set pumheight=15

" workspace - disable autosave
let g:workspace_autosave = 0

" lightline & obsession
set noshowmode   " disable -- insert -- text
let g:lightline = {
      \ 'active': {
      \   'right': [ [ 'lineinfo' ],
      \              [ 'percent' ],
      \              [ 'clip', 'fileformat', 'fileencoding', 'filetype', 'obsession' ] ],
      \   'left': [ [ 'mode', 'paste' ],
      \             [ 'readonly', 'filename', 'modified' ], [ 'branch' ] ]
      \ },
      \ 'component': {
      \   'obsession': '%{ObsessionStatus("S", "")}',
      \   'clip': '%{ToggleClip#getstatus()}',
      \ },
      \ 'component_function': {
      \   'branch': 'fugitive#head'
      \ },
      \ }

" ale
let g:ale_fixers = {
\   'javascript': ['eslint'],
\   'python': ['black', 'isort'],
\}
let g:ale_c_gcc_options = '-std=gnu11 -Wall'
let g:ale_python_pylint_options = "--disable=invalid-name,missing-docstring,no-else-return,C0330,W1203"
let g:ale_echo_msg_format="[%linter%] %s"
let g:ale_fix_on_save = 1
let g:ale_sign_error = '❌'
let g:ale_sign_warning = '⚠️'

" mundo
nnoremap <leader>u :MundoToggle<CR>

" vimwiki
let g:vimwiki_list = [
      \ {
      \         'path': '~/.vimwiki/',
      \         'template_path': '~/.vimwiki/templates',
      \         'css_name': 'mystyle.css',
      \         'auto_toc': 1,
      \         'list_margin': 4,
      \         'bullet_types': ['-', '*', '→', '‣', '•' ],
      \         'listsyms': ' ▂▃▄▅▆▇✓' },
      \ {
      \         'path': '~/.vimwiki/blog',
      \         'path_html': '~/.blog_html',
      \         'template_path': '~/.blog_html/templates',
      \         'auto_toc': 1,
      \         'list_margin': 4},
      \ {
      \         'path': '~/Code/vimwikiwiki/wiki',
      \         'path_html': '~/Code/vimwikiwiki/docs',
      \         'auto_toc': 1},
      \ ]
let automatic_nested_syntaxes = 1
let g:vimwiki_use_mouse = 1
let g:vimwiki_listsyms = ' ▁▂▃▄▅▆▇✓'
let g:vimwiki_toc_header = 'Inhalt'
let g:GPGFilePattern = '*.\(gpg\|asc\|pgp\)\(.wiki\)\='
let g:vimwiki_valid_html_tags = 'b,i,s,u,sub,sup,kbd,br,hr,form,fieldset,legend,input'
nmap <M--> <Plug>VimwikiDecrementListItem
vmap <M--> <Plug>VimwikiDecrementListItm
nmap <M-+> <Plug>VimwikiIncrementListItem
vmap <M-+> <Plug>VimwikiIncrementListItem
"let g:vimwiki_additional_bullet_types = [ '→' ]
"command! UploadBlog !rsync -r /home/michi/.blog_html/ schoenitzer.de:/var/www/blog

" Calendar
let g:calendar_monday = 1
let g:calendar_wruler = 'So Mo Di Mi Do Fr Sa'
let g:calendar_number_of_months = 5

" Tlist plugin
let Tlist_Compact_Format = 1
let Tlist_GainFocus_On_ToggleOpen = 1
let Tlist_Close_On_Select = 1
nnoremap <C-l> :TlistToggle<CR>

" tagbar
nmap <F8> :TagbarToggle<CR>
let g:tagbar_type_rust = {
    \ 'ctagstype' : 'rust',
    \ 'kinds' : [
        \'T:types,type definitions',
        \'f:functions,function definitions',
        \'g:enum,enumeration names',
        \'s:structure names',
        \'m:modules,module names',
        \'c:consts,static constants',
        \'t:traits,traits',
        \'i:impls,trait implementations',
    \]
    \}
let g:tagbar_type_vimwiki = {
          \   'ctagstype':'vimwiki'
          \ , 'kinds':['h:header']
          \ , 'sro':'&&&'
          \ , 'kind2scope':{'h':'header'}
          \ , 'sort':0
          \ , 'ctagsbin':'~/bin/vwtags.py'
          \ , 'ctagsargs': 'default'
          \ }

" Grepper
nnoremap <leader>g :Grepper<cr>
nnoremap <leader>G :Grepper -cword -noprompt<cr>
let g:grepper               = {}
let g:grepper.tools         = ['rg', 'git', 'grep', 'ag']
let g:grepper.simple_prompt = 1

" nvim-miniyank
if exists('g:miniyank_filename')
    map p <Plug>(miniyank-autoput)
    map P <Plug>(miniyank-autoPut)
    map <leader>n <Plug>(miniyank-cycle)
endif

highlight GitGutterAdd    guifg=#009900 ctermfg=2
highlight GitGutterChange guifg=#bbbb00 ctermfg=3
highlight GitGutterDelete guifg=#ff2222 ctermfg=1

" vim-latex
let g:tex_flavor='latex'
let g:Tex_DefaultTargetFormat = 'pdf'
let g:Tex_ShowErrorContext = 0
let g:Tex_GotoError = 0

" languagetool
let g:languagetool_jar="/home/michi/.vim/LanguageTool-4.0/languagetool-commandline.jar"

" Goyo
let g:goyo_width = 120
let g:goyo_height = '100%'
function! s:goyo_enter()
  set nospell
  set linebreak
  set wrap
endfunction

function! s:goyo_leave()
  set spell
  set nowrap
endfunction
autocmd! User GoyoEnter nested call <SID>goyo_enter()
autocmd! User GoyoLeave nested call <SID>goyo_leave()

" indentguides
let g:indentguides_spacechar = '│'
"let g:indentguides_ignorelist = ['text']
let g:indentguides_conceal_color = 'ctermfg=235 ctermbg=NONE guifg=Grey27 guibg=NONE'
let g:indentguides_specialkey_color = 'ctermfg=235 ctermbg=NONE guifg=Grey27 guibg=NONE'
set concealcursor=n

" CamelCaseMotion
"let g:camelcasemotion_key = '<leader>'
map <silent> w <Plug>CamelCaseMotion_w
map <silent> b <Plug>CamelCaseMotion_b
map <silent> e <Plug>CamelCaseMotion_e
"map <silent> ge <Plug>CamelCaseMotion_ge
sunmap w
sunmap b
sunmap e
"sunmap ge
